<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1498767828127">{:repl-history {:ide [], :local [&quot;(enumarated-dist-&gt;aliases\n  {:a 1 :b 1 :c 1})&quot; &quot;(enumarated-dist-&gt;aliases\n  {:a 1 :b 1 :c 3})&quot; &quot;(enumarated-dist-&gt;aliases\n  {:A 0.28\n   :B 0.20\n   :C 0.05\n   :D 0.00\n   :E 0.12\n   :F 0.35})&quot; &quot;(enumarated-dist-&gt;aliases\n  {:A 0.28\n   :B 0.20\n   :C 0.05\n   :E 0.12\n   :F 0.35})&quot; &quot;(enumerated-dist-&gt;aliases\n  {:A 0.28\n   :B 0.20\n   :C 0.05\n   :E 0.12\n   :F 0.35})&quot; &quot;(enumerated-dist-&gt;aliases\n  {:a 1 :b 2})&quot; &quot;(enumerated-dist-&gt;aliases\n  {:a 1 :b 1})&quot; &quot;(enumerated-dist-&gt;aliases\n  {:a 1 :b 1 :c 2})&quot; &quot;(enumerated-dist-&gt;aliases\n  {:A 0.28 :B 0.20 :C 0.05 :E 0.12 :F 0.35})&quot; &quot;(enumerated-distribution-gen\n  {(\&quot;Cristiano\&quot;) 1, (\&quot;ce\&quot;) 1, (\&quot;Zinédine\&quot;) 1, (\&quot;il\&quot;) 1, (\&quot;quatre\&quot;) 1, (\&quot;la\&quot;) 1})&quot; &quot;(run-get *1)&quot; &quot;(enumerated-distribution-gen\n  '{(\&quot;Cristiano\&quot;) 1, (\&quot;ce\&quot;) 1, (\&quot;Zinédine\&quot;) 1, (\&quot;il\&quot;) 1, (\&quot;quatre\&quot;) 1, (\&quot;la\&quot;) 1})&quot; &quot;(run-gen\n  (enumerated-distribution-gen\n  '{(\&quot;Cristiano\&quot;) 1, (\&quot;ce\&quot;) 1, (\&quot;Zinédine\&quot;) 1, (\&quot;il\&quot;) 1, (\&quot;quatre\&quot;) 1, (\&quot;la\&quot;) 1}))&quot; &quot;(enumerated-dist-&gt;aliases\n  '{(\&quot;Cristiano\&quot;) 1, (\&quot;ce\&quot;) 1, (\&quot;Zinédine\&quot;) 1, (\&quot;il\&quot;) 1, (\&quot;quatre\&quot;) 1, (\&quot;la\&quot;) 1})&quot; &quot;(enumerated-dist-&gt;aliases\n  {:a 1\n   :b 1\n   :c 1\n   :d 1\n   :e 1\n   :f 1})&quot; &quot;(count *1)&quot; &quot;(reverse [1 2 3])&quot; &quot;(into (sorted-set) (map reverse) \n  {:a 1 :b 2})&quot; &quot;(into\n  #{}\n  (map reverse) \n  {:a 1 :b 2})&quot; &quot;(into\n  #{}\n  (mapv reverse) \n  {:a 1 :b 2})&quot; &quot;(into\n  #{}\n  (map (comp vector reverse)) \n  {:a 1 :b 2})&quot; &quot;(into\n  #{}\n  (map (comp vec reverse)) \n  {:a 1 :b 2})&quot; &quot;(into (sorted-set)\n  (map (comp vec reverse)) \n  {:a 1 :b 2})&quot; &quot;(alias-method\n  {:a 1})&quot; &quot;(alias-method\n  {:a 1 :b 1})&quot; &quot;(alias-method {:a 1 :b 2})&quot; &quot;(alias-method {:a 1 :b 1 :c 2})&quot; &quot;(run-test\n  )&quot; &quot;(vector (list 1 2 2))&quot; &quot;(vec (list 1 2 2))&quot; &quot;(transd)&quot; &quot;(read-transitions\n  (split-words \&quot;a b c d e f\&quot;))&quot; &quot;(read-transitions\n  (split-words \&quot;a b c d e f\&quot;) 1)&quot; &quot;(read-transitions\n  (split-words \&quot;a b c a b d\&quot;)\n  1)&quot; &quot;{(\&quot;a\&quot; \&quot;b\&quot;) {(\&quot;b\&quot; \&quot;c\&quot;) 1 (\&quot;b\&quot; \&quot;d\&quot;) 1}\n (\&quot;b\&quot; \&quot;c\&quot;) {(\&quot;c\&quot; \&quot;a\&quot;) 1}\n (\&quot;c\&quot; \&quot;a\&quot;) {(\&quot;a\&quot; \&quot;b\&quot;) 1}}&quot; &quot;(read-transitions\n  (split-words \&quot;a b c a b d\&quot;)\n  2)&quot; &quot;(str/split\n  \&quot;a    ab\&quot; #\&quot; \&quot;)&quot; &quot;(run-test 2)&quot; &quot;(constantly 1)&quot; &quot;(*1)&quot; &quot;(run-test)&quot; &quot;(run-test 1)&quot; &quot;(sum-proba\n  (build-alias-array\n    ))&quot; &quot;(sum-proba\n  (build-alias-array\n    {:a 1 :b 1}\n    ))&quot; &quot;(sum-proba\n  (build-alias-array\n    {:a 1 :b 3}\n    ))&quot; &quot;(normalize-enum-dist\n  {\&quot;ø\&quot; 4, \&quot;À§'\&quot; 4, \&quot;^é\&quot; 3, \&quot;U\&quot; 2})&quot; &quot;(sum-proba\n  (build-alias-array\n    {\&quot;ø\&quot; 4, \&quot;À§'\&quot; 4, \&quot;^é\&quot; 3, \&quot;U\&quot; 2}\n    ))&quot; &quot;(pos? 0)&quot; &quot;(if 0 true false)&quot; &quot;(= 1/2 5/10)&quot; &quot;(def example-gen\n  (enumerated-distribution-gen\n    {:a 1 :b 2 :c 1}))&quot; &quot;(def gen\n  (enumerated-distribution-gen\n    {:a 1 :b 2 :c 1}))&quot; &quot;(dotimes [i 10]\n  (gen))&quot; &quot;(dotimes [i 10]\n  (println (gen)))&quot; &quot;(frequencies\n  (for [i 100] (gen)))&quot; &quot;(for [i 100] (gen))&quot; &quot;(frequencies\n  (doseq [i 100] (gen)))&quot; &quot;(doseq [i 100] (gen))&quot; &quot;(dotimes [i 100] (gen))&quot; &quot;(frequencies\n  (repeatedly 100 gen))&quot; &quot;(rand-int 0 0)&quot; &quot;(rand-int 0)&quot; &quot;(rand-int 1)&quot; &quot;(frequencies\n  (repeatedly 100\n  (rand-int 1)))&quot; &quot;(frequencies\n  (repeatedly 100\n  #(rand-int 1)))&quot; &quot;(frequencies\n  (repeatedly 100\n  #(rand-int 2)))&quot; &quot;(linear-enumerated-distribution-gen\n  {:a 1 :b 2: :c 1})&quot; &quot;(linear-enumerated-distribution-gen\n  {:a 1 :b 2 :c 1})&quot; &quot;(let  (linear-enumerated-distribution-gen\n  {:a 1 :b 2 :c 1}))&quot; &quot;(let [gen (linear-enumerated-distribution-gen\n            {:a 1 :b 2 :c 1})]\n  (frequencies\n    (repeatedly 100 gen)))&quot; &quot;(frequencies\n  (repeatedly 100\n    (linear-enumerated-distribution-gen\n      {:a 1 :b 2 :c 1})))&quot; &quot;(run-prob-test)&quot; &quot;(test/run-tests)&quot; &quot;(fill-one-bucket\n  (sorted-set\n    [1 :a]\n    [2 :b]\n    [1 :c]\n    4/3\n    ))&quot; &quot;(fill-one-bucket\n  (sorted-set [1 :a] [2 :b] [1 :c])\n  4/3)&quot; &quot;(modules-init-map (ordered-modules modules))&quot; &quot;(defn init-and-register\n  [dependencies [module-id module-impl]]\n  (let [module-impl (-start module-impl)]\n    (assoc dependencies module-id module-impl)))&quot; &quot;(defn init-and-register\n  [dependencies [module-id module-impl]]\n  (let [module-impl (-init module-impl)]\n    (assoc dependencies module-id module-impl)))&quot; &quot;(-&gt;\n  {}\n  (init-and-register [:monitor (Monitor.)])\n  )&quot; &quot;(ordered-modules modules)&quot; &quot;(let [system (atom 0)]\n  (defn init []\n    (swap! system inc))\n  (defn shut []\n    (swap! system dec)))&quot; &quot;(init)&quot; &quot;(shut)&quot; &quot;system&quot; &quot;(walk/macroexpand-all\n  '(compile-init-sequence modules))&quot; &quot;(ordered-modules (eval modules))&quot; &quot;(update [1 2] 1 inc)&quot; &quot;(select-keys {:a 1 :b 2} [:a])&quot; &quot;(init-all)&quot; &quot;(shut-all)&quot; &quot;(perf/quick-bench (cinetic-energy-1 planet-as-rec2))&quot; &quot;(assoc {:position 0.0 :mass 123.1 :speed 75.2}\n  :toto 1)&quot; &quot;(assoc\n  (map-&gt;Planet {:position 0.0 :mass 123.1 :speed 75.2})\n  :toto 1)&quot; &quot;(conj )&quot; &quot;(conj\n  (map-&gt;Planet {:position 0.0 :mass 123.1 :speed 75.2})\n  [:toto 1])&quot; &quot;(sum-adjacents\n  [1 2 3 4 5 6])&quot; &quot;(vec (range 1000))&quot; &quot;(run-bench)&quot; &quot;(sum-adjacents-1\n  [1 2 3 4 5 6])&quot; &quot;(sum-adjacents-2\n  [1 2 3 4 5 6])&quot; &quot;(run-benches)&quot;], :remote []}}</component>
</project>